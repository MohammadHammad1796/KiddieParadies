@model KiddieParadies.ViewModels.EmployeeFormViewModel

@{
    if (Model.Id == 0)
        ViewData["title"] = "إضافة بيانات موظف";
    else
        ViewData["title"] = "تعديل بيانات موظف";
}

@section styles
{
    <style>
        .field-validation-error, .validation-summary-errors {
            color: #F00;
        }

        .row > * {
            margin-bottom: 10px;
        }

        .btn-primary {
            margin-top: 10px;
        }
    </style>
}

<div class="row">
    <div id="errors" style="color: #F00;"></div>
    @using (Html.BeginForm("SaveEmployeeProfile", "EmployeeRegistration", FormMethod.Post, htmlAttributes: new
    {
        @id = "studentForm",
        @enctype = "multipart/form-data",
        @class = "col-md-10 offset-md-1",
        @autocomplete = "off"
    }))
    {
        @*@Html.ValidationSummary(false, "الرجاء إصلاح الأخطاء التالية")*@
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(m => m.FirstName, new { @class = "col-form-label" })
                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FirstName)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.LastName, new { @class = "col-form-label" })
                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.LastName)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.BirthDate, new { @class = "col-form-label" })
                @Html.TextBoxFor(m => m.BirthDate, "{0:yyyy-MM-dd}",
                    new
                    {
                        @class = "form-control",
                        @type = "date"
                        ,
                        @data_val_validEmployeeBirthDate = "",
                    })
                @Html.ValidationMessageFor(m => m.BirthDate)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.IsMale, new { @class = "col-form-label" })
                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="IsMale" value="true">
                    <label class="form-check-label" for="@Model.IsMale">
                        ذكر
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="IsMale" value="false">
                    <label class="form-check-label" for="@Model.IsMale">
                        أنثى
                    </label>
                </div>
                @Html.ValidationMessageFor(m => m.IsMale)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Image, new { @class = "col-form-label" })
                @Html.TextBoxFor(m => m.Image, htmlAttributes: new
           {
               @type = "file",
               @class = "form-control",
               @accept = ".png,.jpg,.jpeg"
           })
                @Html.ValidationMessageFor(m => m.Image)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Resume, new { @class = "col-form-label" })
                @Html.TextBoxFor(m => m.Resume, htmlAttributes: new
                {
                    @type = "file",
                    @class = "form-control",
                    @accept = ".doc,.docx,.pdf"
                })
                @Html.ValidationMessageFor(m => m.Resume)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Role, new { @class = "col-form-label" })
                @foreach (var role in Model.Roles)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="Role" value="@role.Key">
                        <label class="form-check-label" for="@Model.Role">
                            @role.Value
                        </label>
                    </div>
                }
                @Html.ValidationMessageFor(m => m.Role)
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.ExperienceSummary, new { @class = "col-form-label" })
                @Html.TextAreaFor(m => m.ExperienceSummary, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.ExperienceSummary)
            </div>
        </div>

        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.UserId)
        <input type="submit" class="btn btn-primary" value="متابعة" id="saveBtn" />
    }
</div>

@section scripts
{
    <partial name="_ValidationScriptsPartial" />

    <script>
        $(document).ready(function () {
            $("#saveBtn").attr("disabled", "disabled");

            $("#studentForm").on("blur",
                "input",
                () => {
                    if ($("#studentForm").valid())
                        $("#saveBtn").removeAttr("disabled");
                    else
                        $("#saveBtn").attr("disabled", "disabled");
                });

            var form = $('#studentForm'), origForm = form.serialize();
            $('#studentForm :input').on('change input',
                function () {
                    if (form.serialize() !== origForm && form.valid())
                        $("#saveBtn").removeAttr("disabled");
                    else
                        $("#saveBtn").attr("disabled", "disabled");

                    $("#errors").html("");
                });

            $("input[type='date']").keydown(function (e) {
                var keyCode = e.keyCode || e.which;

                if (!((keyCode == 9) || (keyCode == 13) || (keyCode == 16)))
                    return false;
            });
        });

        $(function () {
            jQuery.validator.addMethod('validEmployeeBirthDate', function (value, element, params) {
                var isValid = true;

                if (new Date().getYear() - new Date(value).getYear() < 18)
                    isValid = false;
                return isValid;
            });

            jQuery.validator.unobtrusive.adapters.add('validEmployeeBirthDate', [], function (options) {
                options.rules['validEmployeeBirthDate'] = {};
                options.messages['validEmployeeBirthDate'] = "عمر الموظف يجب أن يكون فوق 18.";
            });
        }(jQuery));
    </script>
}